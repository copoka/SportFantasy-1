require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PlayersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Player. As you add validations to Player, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for :player
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PlayersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    # not necessary, it just for prevent error from   @user_team=current_user.user_teams.first if current_user
    login_user

    before(:all) { DatabaseCleaner.start; DatabaseCleaner.clean }
    after(:all) { DatabaseCleaner.clean }

    let!(:team_1) { FactoryGirl.create :real_team_with_players, players_count: 3 }
    let!(:team_2) { FactoryGirl.create :real_team_with_players, players_count: 3 }

    it "assigns all players as @players" do
      # player = Player.create! valid_attributes
      get :index, {}, valid_session
      # expect(assigns(:players)).to eq(Player.last 20)
      expect(assigns(:players).to_a).to eq(Player.all.order(:name).to_a)
    end

    describe 'Filtering' do
      it '@players should be from team_1.players only' do
        get :index, real_team_id: team_1.id
        expect(assigns(:players).to_a).to eq(team_1.players.order(:name).to_a)
      end
      it '@players should be from team_2.players only' do
        get :index, real_team_id: team_2.id
        expect(assigns(:players).to_a).to eq(team_2.players.order(:name).to_a)
      end
    end

    describe 'Sorting' do
      it 'sort by real_teams.name' do
        get :index, sort: 'real_teams.name'
        expect(assigns(:players).to_a).to eq(Player.all.includes(:real_team).order('real_teams.name').to_a)
      end

      it 'sort by ampluas.name' do
        get :index, sort: 'ampluas.name'
        expect(assigns(:players).to_a).to eq(Player.all.includes(:amplua).order('ampluas.name').to_a)
      end
    end

    # TODO make it green
    describe 'Filtering and sorting together' do
      it '@players should be from team_1.players only and sort by ampluas.name' do
        pending
        get :index, {real_team_id: team_1.id, sort: 'ampluas.name'}
        expect(assigns(:players).to_a).to eq(team_1.players.includes(:amplua).order('ampluas.name').to_a)
      end
      it '@players should be from team_2.players only and sort by ampluas.name' do
        pending
        get :index, {real_team_id: team_2.id, sort: 'ampluas.name'}
        expect(assigns(:players).to_a).to eq(team_2.players.order('ampluas.name').to_a)
      end
    end
  end

  describe "GET show" do
    it "assigns the requested player as @player" do
      player = Player.create! valid_attributes
      get :show, {:id => player.to_param}, valid_session
      expect(assigns(:player)).to eq(player)
    end
  end

  describe "GET new" do
    it "assigns a new player as @player" do
      get :new, {}, valid_session
      expect(assigns(:player)).to be_a_new(Player)
    end
  end

  describe "GET edit" do
    it "assigns the requested player as @player" do
      player = Player.create! valid_attributes
      get :edit, {:id => player.to_param}, valid_session
      expect(assigns(:player)).to eq(player)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Player" do
        expect {
          post :create, {:player => valid_attributes}, valid_session
        }.to change(Player, :count).by(1)
      end

      it "assigns a newly created player as @player" do
        post :create, {:player => valid_attributes}, valid_session
        expect(assigns(:player)).to be_a(Player)
        expect(assigns(:player)).to be_persisted
      end

      it "redirects to the created player" do
        post :create, {:player => valid_attributes}, valid_session
        expect(response).to redirect_to(Player.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved player as @player" do
        post :create, {:player => invalid_attributes}, valid_session
        expect(assigns(:player)).to be_a_new(Player)
      end

      it "re-renders the 'new' template" do
        post :create, {:player => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested player" do
        player = Player.create! valid_attributes
        put :update, {:id => player.to_param, :player => new_attributes}, valid_session
        player.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested player as @player" do
        player = Player.create! valid_attributes
        put :update, {:id => player.to_param, :player => valid_attributes}, valid_session
        expect(assigns(:player)).to eq(player)
      end

      it "redirects to the player" do
        player = Player.create! valid_attributes
        put :update, {:id => player.to_param, :player => valid_attributes}, valid_session
        expect(response).to redirect_to(player)
      end
    end

    describe "with invalid params" do
      it "assigns the player as @player" do
        player = Player.create! valid_attributes
        put :update, {:id => player.to_param, :player => invalid_attributes}, valid_session
        expect(assigns(:player)).to eq(player)
      end

      it "re-renders the 'edit' template" do
        player = Player.create! valid_attributes
        put :update, {:id => player.to_param, :player => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested player" do
      player = Player.create! valid_attributes
      expect {
        delete :destroy, {:id => player.to_param}, valid_session
      }.to change(Player, :count).by(-1)
    end

    it "redirects to the players list" do
      player = Player.create! valid_attributes
      delete :destroy, {:id => player.to_param}, valid_session
      expect(response).to redirect_to(players_url)
    end
  end

end
