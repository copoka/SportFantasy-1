require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UserTeamPlayersController, :type => :controller do

  # let!(:valid_user_team_player){FactoryGirl.create(:user_team_player_with_user_team)}
  # let!(:valid_user_team_player){FactoryGirl.create :user_team_with_players, players_count: 3}
  let!(:player) { FactoryGirl.create :player }
  let!(:user_team) { FactoryGirl.create :user_team }

  before(:all) do
    @player= FactoryGirl.create :player
    @user_team=FactoryGirl.create :user_team
  end

  # This should return the minimal set of attributes required to create a valid
  # UserTeamPlayer. As you add validations to UserTeamPlayer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # {
    #     player_id: 1,
    #     first_team: true,
    #     user_team_id: 1
    # }

    # valid_user_team_player.attributes
    # puts @player.attributes
    # puts @user_team.attributes
    FactoryGirl.attributes_for :user_team_player,user_team: @user_team, player: @player
  }

  let(:valid_attributes_for_queries) {
    valid_attributes.transform_keys{ |key| key.to_s+'_id' }
  }

  let(:invalid_attributes) {
    {
        player_id: 'dsfds',
        first_team: true,
        user_team_id: 1
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserTeamPlayersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    pending 'later'
    # it "assigns all user_team_players as @user_team_players" do
    #   puts valid_attributes
    #   user_team_player = UserTeamPlayer.create! valid_attributes
    #   get :index, {}, valid_session
    #   expect(assigns(:user_team_players)).to eq([user_team_player])
    # end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new UserTeamPlayer" do
        puts valid_attributes
        expect {
          post :create, {:user_team_player => valid_attributes_for_queries}, valid_session
        }.to change(UserTeamPlayer, :count).by(1)
      end

      it "assigns a newly created user_team_player as @user_team_player" do
        post :create, {:user_team_player => valid_attributes_for_queries}, valid_session
        expect(assigns(:user_team_player)).to be_a(UserTeamPlayer)
        expect(assigns(:user_team_player)).to be_persisted
      end

      it "redirects to the created user_team_player" do
        post :create, {:user_team_player => valid_attributes_for_queries}, valid_session
        expect(response).to redirect_to(players_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user_team_player as @user_team_player" do
        post :create, {:user_team_player => invalid_attributes}, valid_session
        expect(assigns(:user_team_player)).to be_a_new(UserTeamPlayer)
      end

      it "re-renders the 'new' template" do
        post :create, {:user_team_player => invalid_attributes}, valid_session
        expect(response).to redirect_to(players_path)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {first_team: true}
      }

      it "updates the requested user_team_player" do
        user_team_player = UserTeamPlayer.create! valid_attributes
        put :update, {:id => user_team_player.to_param, :user_team_player => new_attributes}, valid_session
        user_team_player.reload
        expect(user_team_player.first_team).to be_true
      end

      it "assigns the requested user_team_player as @user_team_player" do
        user_team_player = UserTeamPlayer.create! valid_attributes
        put :update, {:id => user_team_player.to_param, :user_team_player => valid_attributes_for_queries}, valid_session
        expect(assigns(:user_team_player)).to eq(user_team_player)
      end

      it "redirects to the user_team_player" do
        user_team_player = UserTeamPlayer.create! valid_attributes
        put :update, {:id => user_team_player.to_param, :user_team_player => valid_attributes_for_queries}, valid_session
        expect(response).to redirect_to(user_team_player)
      end
    end

    describe "with invalid params" do
      it "assigns the user_team_player as @user_team_player" do
        user_team_player = UserTeamPlayer.create! valid_attributes
        put :update, {:id => user_team_player.to_param, :user_team_player => invalid_attributes}, valid_session
        expect(assigns(:user_team_player)).to eq(user_team_player)
      end

      it "re-renders the 'edit' template" do
        user_team_player = UserTeamPlayer.create! valid_attributes
        put :update, {:id => user_team_player.to_param, :user_team_player => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user_team_player" do
      user_team_player = UserTeamPlayer.create! valid_attributes
      expect {
        delete :destroy, {:id => user_team_player.to_param}, valid_session
      }.to change(UserTeamPlayer, :count).by(-1)
    end

    it "redirects to the user_team_players list" do
      user_team_player = UserTeamPlayer.create! valid_attributes
      delete :destroy, {:id => user_team_player.to_param}, valid_session
      expect(response).to redirect_to(user_team_players_url)
    end
  end

end
